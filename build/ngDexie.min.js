/**
 * Angularjs wrapper around Dexie.js an IndexedDB handler
 * @version v0.0.8-dev-2015-01-26
 * @link https://github.com/FlussoBV/NgDexie
 * @license Apache License, see LICENSE file
 */
"undefined"!=typeof module&&"undefined"!=typeof exports&&module.exports===exports&&(module.exports="ngDexie"),function(a,b){!function(){"use strict";function a(){function a(){return d}var c=this,d={name:"",debug:!1},e=function(){console.error("NgDexie :: No configuration hook has been set!")};c.setOptions=function(a){d=b.extend({},d,a)},c.setConfiguration=function(a){e=a},c.$get=function(d,f,g,h){function i(a,b){var c=f.defer();return p.table(a).get(b,function(a){c.resolve(a)}),c.promise}function j(a,c,d){var e=f.defer();return p.table(a).where(c).equals(d).toArray(function(a){b.isArray(a)&&a.length>0?e.resolve(a[0]):e.reject()}),e.promise}function k(a,e){return b.isUndefined(a)?p:(b.isUndefined(e)&&(e=!1),e?d.$apply(function(){a.call(c,p)}):a.call(c,p),p)}function l(a){var b=f.defer();return p.table(a).toArray(function(a){b.resolve(a)}),b.promise}function m(a,b,c){var d=f.defer();return p.table(a).where(b).equals(c).toArray(function(a){d.resolve(a)}),d.promise}function n(a,b){var c=f.defer();return p.table(a).put(h.deepClone(b)).then(function(a){c.resolve(a)}),c.promise}g.debug("NgDexie :: init");var o=a();o.debug&&g.warn("NgDexie :: debug mode enabled");var p=new Dexie(o.name);return o.debug&&p["delete"]().then(function(){g.warn("debug mode :: Database deleted")}),e.call(this,p),p.open(),p.on("blocked",function(){g.warn("database seems to be blocked")}),{getOptions:a,get:i,getByIndex:j,getDb:k,list:l,listByIndex:m,put:n}},c.$get.$inject=["$rootScope","$q","$log","ngDexieUtils"]}b.module("ngdexie",["ngdexie.core"]),b.module("ngdexie.core",["ngdexie.utils"]),b.module("ngdexie.core").provider("ngDexie",a)}(),function(){"use strict";function a(){function a(a){var c=Dexie.deepClone(a);return b.isDefined(c.$$hashKey)&&delete c.$$hashKey,a}return{deepClone:a}}b.module("ngdexie.utils",["ngdexie.core"]),b.module("ngdexie.utils").factory("ngDexieUtils",a)}(),function(){"use strict";function a(a,c,d,e){function f(a,c){var d=e.getDb();b.isArray(c)||(c=[c]),d.syncable.disconnect(a).then(function(){var e=[];b.forEach(c,function(a){e.push(d.table(a))}),d.transaction("rw",e,function(){b.forEach(e,function(a){a.clear()})}).then(function(){return d.syncable["delete"](a).then(function(){setTimeout(function(){d.syncable.connect("iSyncRestProtocol",a)},1500)})})})}function g(a){var c=d.defer(),f=e.getDb();return b.isDefined(f)&&f.isOpen()&&f.syncable.unsyncedChanges(a).then(function(a){c.resolve(a)}),c.promise}return e.getDb().syncable&&e.getDb().syncable.on("statusChanged",function(a,b){c.$apply(function(){c.$broadcast("ngDexieStatusChanged",{status:a,statusText:Dexie.Syncable.StatusTexts[a],url:b})})}),{resync:f,unsyncedChanges:g}}b.module("ngdexie.sync",["ngdexie.core"]),b.module("ngdexie.sync").factory("ngDexieSync",a),a.$inject=["$log","$rootScope","$q","ngDexie"]}()}(window,window.angular);